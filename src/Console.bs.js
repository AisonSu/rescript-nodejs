// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");

function Make(M) {
  var $$console = new Console({
        stdout: M.stdout,
        stderr: M.stderr,
        ignoreErrors: M.ignoreErrors,
        colorMode: M.colorMode,
        inspectOptions: M.inspectOptions
      });
  var assert_ = function (param) {
    $$console.assert(param);
    return /* () */0;
  };
  var assertWithMessage = function (param, param$1) {
    $$console.assert(param, param$1);
    return /* () */0;
  };
  var clear = function (param) {
    $$console.clear();
    return /* () */0;
  };
  var count = function (param) {
    $$console.count(param);
    return /* () */0;
  };
  var countReset = function (param) {
    $$console.countReset(param);
    return /* () */0;
  };
  var debug = function (param) {
    $$console.debug(param);
    return /* () */0;
  };
  var debugMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "debug", [param]);
    return /* () */0;
  };
  var dir = function (param) {
    $$console.dir(param);
    return /* () */0;
  };
  var dirMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "dir", [param]);
    return /* () */0;
  };
  var dirxml = function (param) {
    $$console.dirxml(param);
    return /* () */0;
  };
  var dirxmlMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "dirxml", [param]);
    return /* () */0;
  };
  var error = function (param) {
    $$console.error(param);
    return /* () */0;
  };
  var errorMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "error", [param]);
    return /* () */0;
  };
  var group = function (param) {
    $$console.group(param);
    return /* () */0;
  };
  var groupMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "group", [param]);
    return /* () */0;
  };
  var groupEnd = function (param) {
    $$console.groupEnd();
    return /* () */0;
  };
  var info = function (param) {
    $$console.info(param);
    return /* () */0;
  };
  var infoMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "info", [param]);
    return /* () */0;
  };
  var log = function (param) {
    $$console.log(param);
    return /* () */0;
  };
  var logMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "log", [param]);
    return /* () */0;
  };
  var table = function (param) {
    $$console.table(param);
    return /* () */0;
  };
  var time = function (param) {
    $$console.time(param);
    return /* () */0;
  };
  var timeLog = function (param, param$1) {
    Caml_splice_call.spliceObjApply($$console, "timeLog", [
          param,
          param$1
        ]);
    return /* () */0;
  };
  var trace = function (param) {
    $$console.trace(param);
    return /* () */0;
  };
  var traceMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "trace", [param]);
    return /* () */0;
  };
  var warn = function (param) {
    $$console.warn(param);
    return /* () */0;
  };
  var warnMany = function (param) {
    Caml_splice_call.spliceObjApply($$console, "warn", [param]);
    return /* () */0;
  };
  return {
          $$console: $$console,
          assert_: assert_,
          assertWithMessage: assertWithMessage,
          clear: clear,
          count: count,
          countReset: countReset,
          debug: debug,
          debugMany: debugMany,
          dir: dir,
          dirMany: dirMany,
          dirxml: dirxml,
          dirxmlMany: dirxmlMany,
          error: error,
          errorMany: errorMany,
          group: group,
          groupMany: groupMany,
          groupEnd: groupEnd,
          info: info,
          infoMany: infoMany,
          log: log,
          logMany: logMany,
          table: table,
          time: time,
          timeLog: timeLog,
          trace: trace,
          traceMany: traceMany,
          warn: warn,
          warnMany: warnMany
        };
}

var partial_arg = console;

function assert_(param) {
  partial_arg.assert(param);
  return /* () */0;
}

var partial_arg$1 = console;

function assertWithMessage(param, param$1) {
  partial_arg$1.assert(param, param$1);
  return /* () */0;
}

var partial_arg$2 = console;

function clear(param) {
  partial_arg$2.clear();
  return /* () */0;
}

var partial_arg$3 = console;

function count(param) {
  partial_arg$3.count(param);
  return /* () */0;
}

var partial_arg$4 = console;

function countReset(param) {
  partial_arg$4.countReset(param);
  return /* () */0;
}

var partial_arg$5 = console;

function debug(param) {
  partial_arg$5.debug(param);
  return /* () */0;
}

var partial_arg$6 = console;

function debugMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$6, "debug", [param]);
  return /* () */0;
}

var partial_arg$7 = console;

function dir(param) {
  partial_arg$7.dir(param);
  return /* () */0;
}

var partial_arg$8 = console;

function dirMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$8, "dir", [param]);
  return /* () */0;
}

var partial_arg$9 = console;

function dirXml(param) {
  partial_arg$9.dirxml(param);
  return /* () */0;
}

var partial_arg$10 = console;

function dirXmlMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$10, "dirxml", [param]);
  return /* () */0;
}

var partial_arg$11 = console;

function error(param) {
  partial_arg$11.error(param);
  return /* () */0;
}

var partial_arg$12 = console;

function errorMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$12, "error", [param]);
  return /* () */0;
}

var partial_arg$13 = console;

function group(param) {
  partial_arg$13.group(param);
  return /* () */0;
}

var partial_arg$14 = console;

function groupMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$14, "group", [param]);
  return /* () */0;
}

var partial_arg$15 = console;

function groupEnd(param) {
  partial_arg$15.groupEnd();
  return /* () */0;
}

var partial_arg$16 = console;

function info(param) {
  partial_arg$16.info(param);
  return /* () */0;
}

var partial_arg$17 = console;

function infoMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$17, "info", [param]);
  return /* () */0;
}

var partial_arg$18 = console;

function log(param) {
  partial_arg$18.log(param);
  return /* () */0;
}

var partial_arg$19 = console;

function logMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$19, "log", [param]);
  return /* () */0;
}

var partial_arg$20 = console;

function table(param) {
  partial_arg$20.table(param);
  return /* () */0;
}

var partial_arg$21 = console;

function time(param) {
  partial_arg$21.time(param);
  return /* () */0;
}

var partial_arg$22 = console;

function timeLog(param, param$1) {
  Caml_splice_call.spliceObjApply(partial_arg$22, "timeLog", [
        param,
        param$1
      ]);
  return /* () */0;
}

var partial_arg$23 = console;

function trace(param) {
  partial_arg$23.trace(param);
  return /* () */0;
}

var partial_arg$24 = console;

function traceMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$24, "trace", [param]);
  return /* () */0;
}

var partial_arg$25 = console;

function warn(param) {
  partial_arg$25.warn(param);
  return /* () */0;
}

var partial_arg$26 = console;

function warnMany(param) {
  Caml_splice_call.spliceObjApply(partial_arg$26, "warn", [param]);
  return /* () */0;
}

exports.Make = Make;
exports.assert_ = assert_;
exports.assertWithMessage = assertWithMessage;
exports.clear = clear;
exports.count = count;
exports.countReset = countReset;
exports.debug = debug;
exports.debugMany = debugMany;
exports.dir = dir;
exports.dirMany = dirMany;
exports.dirXml = dirXml;
exports.dirXmlMany = dirXmlMany;
exports.error = error;
exports.errorMany = errorMany;
exports.group = group;
exports.groupMany = groupMany;
exports.groupEnd = groupEnd;
exports.info = info;
exports.infoMany = infoMany;
exports.log = log;
exports.logMany = logMany;
exports.table = table;
exports.time = time;
exports.timeLog = timeLog;
exports.trace = trace;
exports.traceMany = traceMany;
exports.warn = warn;
exports.warnMany = warnMany;
/* partial_arg Not a pure module */
