// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Child_process = require("child_process");

function exec(command, cwd, env, encoding, shell, timeout, maxBuffer, killSignal, uid, gid, windowsHide, callback) {
  return Child_process.exec(command, {
              cwd: cwd,
              env: env,
              encoding: encoding,
              shell: shell,
              timeout: timeout,
              maxBuffer: maxBuffer,
              killSignal: killSignal,
              uid: uid,
              gid: gid,
              windowsHide: windowsHide
            }, (function (error, stdout, stderr) {
                if (error !== undefined) {
                  return Curry._1(callback, /* Error */Block.__(1, [Caml_option.valFromOption(error)]));
                } else {
                  return Curry._1(callback, /* Ok */Block.__(0, [/* tuple */[
                                  stdout,
                                  stderr
                                ]]));
                }
              }));
}

function execFile(file, args, cwd, env, encoding, shell, timeout, maxBuffer, killSignal, uid, gid, windowsHide, callback) {
  return Child_process.execFile(file, args, {
              cwd: cwd,
              env: env,
              encoding: encoding,
              shell: shell,
              timeout: timeout,
              maxBuffer: maxBuffer,
              killSignal: killSignal,
              uid: uid,
              gid: gid,
              windowsHide: windowsHide
            }, (function (error, stdout, stderr) {
                if (error !== undefined) {
                  return Curry._1(callback, /* Error */Block.__(1, [Caml_option.valFromOption(error)]));
                } else {
                  return Curry._1(callback, /* Ok */Block.__(0, [/* tuple */[
                                  stdout,
                                  stderr
                                ]]));
                }
              }));
}

function fork(modulePath, args, cwd, detached, execPath, execArgv, uid, gid, env, stdio, silent, windowsVerbatimArguments, param) {
  return Child_process.fork(modulePath, $$Array.of_list(args), {
              cwd: cwd,
              detached: detached,
              env: env,
              execPath: execPath,
              execArgv: execArgv,
              silent: silent,
              stdio: stdio,
              uid: uid,
              gid: gid,
              windowsVerbatimArguments: windowsVerbatimArguments
            });
}

function spawn(command, args, cwd, detached, uid, gid, env, argv0, stdio, shell, windowsVerbatimArguments, windowsHide, param) {
  return Child_process.spawn(command, $$Array.of_list(args), {
              cwd: cwd,
              env: env,
              argv0: argv0,
              stdio: stdio,
              detached: detached,
              uid: uid,
              gid: gid,
              shell: shell,
              windowsVerbatimArguments: windowsVerbatimArguments,
              windowsHide: windowsHide
            });
}

function spawnSync(command, args, cwd, input, detached, uid, gid, env, argv0, stdio, shell, windowsVerbatimArguments, windowsHide, param) {
  return Child_process.spawnSync(command, $$Array.of_list(args), {
              cwd: cwd,
              env: env,
              input: input,
              argv0: argv0,
              stdio: stdio,
              detached: detached,
              uid: uid,
              gid: gid,
              shell: shell,
              windowsVerbatimArguments: windowsVerbatimArguments,
              windowsHide: windowsHide
            });
}

function execSync(command, cwd, input, env, encoding, shell, timeout, maxBuffer, killSignal, uid, gid, windowsHide, param) {
  return Child_process.execSync(command, {
              cwd: cwd,
              env: env,
              input: input,
              encoding: encoding,
              shell: shell,
              timeout: timeout,
              maxBuffer: maxBuffer,
              killSignal: killSignal,
              uid: uid,
              gid: gid,
              windowsHide: windowsHide
            });
}

function execFileSync(file, args, cwd, input, env, encoding, shell, timeout, maxBuffer, killSignal, uid, gid, windowsHide, param) {
  return Child_process.execFileSync(file, args, {
              cwd: cwd,
              env: env,
              input: input,
              encoding: encoding,
              shell: shell,
              timeout: timeout,
              maxBuffer: maxBuffer,
              killSignal: killSignal,
              uid: uid,
              gid: gid,
              windowsHide: windowsHide
            });
}

exports.exec = exec;
exports.execFile = execFile;
exports.fork = fork;
exports.spawn = spawn;
exports.spawnSync = spawnSync;
exports.execSync = execSync;
exports.execFileSync = execFileSync;
/* child_process Not a pure module */
