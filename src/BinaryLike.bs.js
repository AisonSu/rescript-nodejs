// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");


function reflectJsConstructor(data) {
  let str = Object.prototype.toString.call(data);
  return str.slice(8, str.length - 1);
};

;

var Unsafe = { };

function classify_exn(binaryLike) {
  var match = reflectJsConstructor(binaryLike);
  switch (match) {
    case "ArrayBuffer" :
        return /* Buffer */Block.__(1, [binaryLike]);
    case "DataView" :
        return /* DataView */Block.__(11, [binaryLike]);
    case "Float32Array" :
        return /* Float32Array */Block.__(9, [binaryLike]);
    case "Float64Array" :
        return /* Float64Array */Block.__(10, [binaryLike]);
    case "Int16Array" :
        return /* Int16Array */Block.__(6, [binaryLike]);
    case "Int32Array" :
        return /* Int32Array */Block.__(8, [binaryLike]);
    case "Int8Array" :
        return /* Int8Array */Block.__(2, [binaryLike]);
    case "String" :
        return /* String */Block.__(0, [binaryLike]);
    case "Uint16Array" :
        return /* Uint16Array */Block.__(5, [binaryLike]);
    case "Uint32Array" :
        return /* Uint32Array */Block.__(7, [binaryLike]);
    case "Uint8Array" :
        return /* Uint8Array */Block.__(3, [binaryLike]);
    case "Uint8ClampedArray" :
        return /* Uint8ClampedArray */Block.__(4, [binaryLike]);
    default:
      return Pervasives.failwith("Unknown Data Type");
  }
}

function classify(binaryLike) {
  var match = reflectJsConstructor(binaryLike);
  switch (match) {
    case "ArrayBuffer" :
        return /* Ok */Block.__(0, [/* Buffer */Block.__(1, [binaryLike])]);
    case "DataView" :
        return /* Ok */Block.__(0, [/* DataView */Block.__(11, [binaryLike])]);
    case "Float32Array" :
        return /* Ok */Block.__(0, [/* Float32Array */Block.__(9, [binaryLike])]);
    case "Float64Array" :
        return /* Ok */Block.__(0, [/* Float64Array */Block.__(10, [binaryLike])]);
    case "Int16Array" :
        return /* Ok */Block.__(0, [/* Int16Array */Block.__(6, [binaryLike])]);
    case "Int32Array" :
        return /* Ok */Block.__(0, [/* Int32Array */Block.__(8, [binaryLike])]);
    case "Int8Array" :
        return /* Ok */Block.__(0, [/* Int8Array */Block.__(2, [binaryLike])]);
    case "String" :
        return /* Ok */Block.__(0, [/* String */Block.__(0, [binaryLike])]);
    case "Uint16Array" :
        return /* Ok */Block.__(0, [/* Uint16Array */Block.__(5, [binaryLike])]);
    case "Uint32Array" :
        return /* Ok */Block.__(0, [/* Uint32Array */Block.__(7, [binaryLike])]);
    case "Uint8Array" :
        return /* Ok */Block.__(0, [/* Uint8Array */Block.__(3, [binaryLike])]);
    case "Uint8ClampedArray" :
        return /* Ok */Block.__(0, [/* Uint8ClampedArray */Block.__(4, [binaryLike])]);
    default:
      return /* Error */Block.__(1, [binaryLike]);
  }
}

exports.Unsafe = Unsafe;
exports.classify_exn = classify_exn;
exports.classify = classify;
/*  Not a pure module */
