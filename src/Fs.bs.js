// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");

var Constants = { };

var jsMapperConstantArray = [
  /* tuple */[
    -845055443,
    "ucs2"
  ],
  /* tuple */[
    -844212943,
    "utf8"
  ],
  /* tuple */[
    -718799473,
    "base64"
  ],
  /* tuple */[
    -718799473,
    "base64"
  ],
  /* tuple */[
    -714733139,
    "latin1"
  ],
  /* tuple */[
    -317998079,
    "binary"
  ],
  /* tuple */[
    5194459,
    "hex"
  ],
  /* tuple */[
    640502097,
    "ascii"
  ],
  /* tuple */[
    1042356549,
    "utf16le"
  ]
];

function encodingToJs(param) {
  return Js_mapperRt.binarySearch(9, param, jsMapperConstantArray);
}

function encodingFromJs(param) {
  return Js_mapperRt.revSearch(9, jsMapperConstantArray, param);
}

function encodingToJsOpt(param) {
  if (param !== undefined) {
    return encodingToJs(param);
  }
  
}

var jsMapperConstantArray$1 = [
  /* tuple */[
    -1022125687,
    "r+"
  ],
  /* tuple */[
    -999795206,
    "a"
  ],
  /* tuple */[
    -931862863,
    "ax"
  ],
  /* tuple */[
    -798731664,
    "a+"
  ],
  /* tuple */[
    -477700929,
    "w"
  ],
  /* tuple */[
    -164749387,
    "w+"
  ],
  /* tuple */[
    53787687,
    "ax+"
  ],
  /* tuple */[
    191168758,
    "wx"
  ],
  /* tuple */[
    601873644,
    "wx+"
  ],
  /* tuple */[
    812808324,
    "rs+"
  ],
  /* tuple */[
    914388854,
    "r"
  ]
];

function flagsToJs(param) {
  return Js_mapperRt.binarySearch(11, param, jsMapperConstantArray$1);
}

function flagsFromJs(param) {
  return Js_mapperRt.revSearch(11, jsMapperConstantArray$1, param);
}

function classify(stat) {
  if (stat.isFile()) {
    return /* File */781515420;
  } else if (stat.isDirectory()) {
    return /* Directory */840421965;
  } else if (stat.isBlockDevice()) {
    return /* BlockDevice */-176826973;
  } else if (stat.isCharacterDevice()) {
    return /* CharacterDevice */-882124545;
  } else if (stat.isSymbolicLink()) {
    return /* SymbolicLink */-521231764;
  } else if (stat.isFIFO()) {
    return /* FIFO */779915596;
  } else {
    return /* Socket */-623181869;
  }
}

var Stat = {
  classify: classify
};

function writeFileSync(file, encoding, mode, flag, data) {
  var tmp = { };
  if (encoding !== undefined) {
    tmp.encoding = (function () {
          switch (Caml_option.valFromOption(encoding)) {
            case 5194459 :
                return "hex";
            case -844212943 :
                return "utf8";
            case 640502097 :
                return "ascii";
            case -714733139 :
                return "latin1";
            case -718799473 :
                return "base64";
            case -845055443 :
                return "ucs2";
            case -718799473 :
                return "base64";
            case -317998079 :
                return "binary";
            case 1042356549 :
                return "utf16le";
            
          }
        })();
  }
  if (mode !== undefined) {
    tmp.mode = Caml_option.valFromOption(mode);
  }
  if (flag !== undefined) {
    tmp.flag = Caml_option.valFromOption(flag);
  }
  Fs.writeFileSync(file, data, tmp);
  return /* () */0;
}

function appendFile(handle, $staropt$star, mode, flag, data) {
  var encoding = $staropt$star !== undefined ? $staropt$star : /* utf8 */-844212943;
  return handle.appendFile(data, {
              encoding: encodingToJs(encoding),
              mode: mode,
              flag: flag !== undefined ? flagsToJs(flag) : undefined
            });
}

function readFile(handle, flag, param) {
  return handle.read({
              flag: flag !== undefined ? flagsToJs(flag) : undefined
            });
}

function readFileWithEncoding(handle, flag, encoding) {
  return handle.read({
              encoding: encoding,
              flag: flag !== undefined ? flagsToJs(flag) : undefined
            });
}

function writeFileString(handle, encoding, mode, flag, data) {
  var tmp = { };
  if (encoding !== undefined) {
    tmp.encoding = (function () {
          switch (Caml_option.valFromOption(encoding)) {
            case 5194459 :
                return "hex";
            case -844212943 :
                return "utf8";
            case 640502097 :
                return "ascii";
            case -714733139 :
                return "latin1";
            case -718799473 :
                return "base64";
            case -845055443 :
                return "ucs2";
            case -718799473 :
                return "base64";
            case -317998079 :
                return "binary";
            case 1042356549 :
                return "utf16le";
            
          }
        })();
  }
  if (mode !== undefined) {
    tmp.mode = Caml_option.valFromOption(mode);
  }
  if (flag !== undefined) {
    tmp.flag = Caml_option.valFromOption(flag);
  }
  return handle.writeFile(data, tmp);
}

function writeFileBuffer(handle, $staropt$star, $staropt$star$1, $staropt$star$2, data) {
  var encoding = $staropt$star !== undefined ? $staropt$star : /* utf8 */-844212943;
  var mode = $staropt$star$1 !== undefined ? $staropt$star$1 : 438;
  var flag = $staropt$star$2 !== undefined ? $staropt$star$2 : /* Write */-477700929;
  return handle.writeFile(data, {
              encoding: encodingToJs(encoding),
              mode: mode,
              flag: flagsToJs(flag)
            });
}

function writeFileUint8Array(handle, $staropt$star, $staropt$star$1, $staropt$star$2, data) {
  var encoding = $staropt$star !== undefined ? $staropt$star : /* utf8 */-844212943;
  var mode = $staropt$star$1 !== undefined ? $staropt$star$1 : 438;
  var flag = $staropt$star$2 !== undefined ? $staropt$star$2 : /* Write */-477700929;
  return handle.writeFile(data, {
              encoding: encodingToJs(encoding),
              mode: mode,
              flag: flagsToJs(flag)
            });
}

var Handle = {
  appendFile: appendFile,
  readFile: readFile,
  readFileWithEncoding: readFileWithEncoding,
  writeFileString: writeFileString,
  writeFileBuffer: writeFileBuffer,
  writeFileUint8Array: writeFileUint8Array
};

function appendFile$1(path, encoding, mode, flag, data) {
  var tmp = { };
  if (encoding !== undefined) {
    tmp.encoding = (function () {
          switch (Caml_option.valFromOption(encoding)) {
            case 5194459 :
                return "hex";
            case -844212943 :
                return "utf8";
            case 640502097 :
                return "ascii";
            case -714733139 :
                return "latin1";
            case -718799473 :
                return "base64";
            case -845055443 :
                return "ucs2";
            case -718799473 :
                return "base64";
            case -317998079 :
                return "binary";
            case 1042356549 :
                return "utf16le";
            
          }
        })();
  }
  if (mode !== undefined) {
    tmp.mode = Caml_option.valFromOption(mode);
  }
  if (flag !== undefined) {
    tmp.flag = Caml_option.valFromOption(flag);
  }
  return Fs.promises.appendFile(path, data, tmp);
}

function appendFileBuffer(path, encoding, mode, flag, data) {
  var tmp = { };
  if (encoding !== undefined) {
    tmp.encoding = (function () {
          switch (Caml_option.valFromOption(encoding)) {
            case 5194459 :
                return "hex";
            case -844212943 :
                return "utf8";
            case 640502097 :
                return "ascii";
            case -714733139 :
                return "latin1";
            case -718799473 :
                return "base64";
            case -845055443 :
                return "ucs2";
            case -718799473 :
                return "base64";
            case -317998079 :
                return "binary";
            case 1042356549 :
                return "utf16le";
            
          }
        })();
  }
  if (mode !== undefined) {
    tmp.mode = Caml_option.valFromOption(mode);
  }
  if (flag !== undefined) {
    tmp.flag = Caml_option.valFromOption(flag);
  }
  return Fs.promises.appendFile(path, data, tmp);
}

function mkdir(recursive, mode, path) {
  var tmp = { };
  if (recursive !== undefined) {
    tmp.recursive = Caml_option.valFromOption(recursive);
  }
  if (mode !== undefined) {
    tmp.mode = Caml_option.valFromOption(mode);
  }
  return Fs.promises.mkdir(path, tmp);
}

function mkdtemp(encoding, prefix) {
  if (encoding !== undefined) {
    return Fs.promises.mkddtemp(prefix, {
                encoding: encodingToJs(encoding)
              });
  } else {
    return Fs.promises.mkddtemp(prefix, undefined);
  }
}

var Promises = {
  appendFile: appendFile$1,
  appendFileBuffer: appendFileBuffer,
  mkdir: mkdir,
  mkdtemp: mkdtemp
};

var WriteStream = { };

var ReadStream = { };

function createReadStream(path, flags, encoding, fd, mode, autoClose, emitClose, start, end_, highWaterMark, param) {
  return Fs.createReadStream(path, {
              flags: flags !== undefined ? flagsToJs(flags) : undefined,
              encoding: encoding,
              fd: fd,
              mode: mode,
              autoClose: autoClose,
              emitClose: emitClose,
              start: start,
              end: end_,
              highWaterMark: highWaterMark
            });
}

function createWriteStream(path, flags, encoding, fd, mode, autoClose, emitClose, start, param) {
  return Fs.createWriteStream(path, {
              flags: flags !== undefined ? flagsToJs(flags) : undefined,
              encoding: encoding,
              fd: fd,
              mode: mode,
              autoClose: autoClose,
              emitClose: emitClose,
              start: start
            });
}

exports.Constants = Constants;
exports.encodingToJs = encodingToJs;
exports.encodingFromJs = encodingFromJs;
exports.encodingToJsOpt = encodingToJsOpt;
exports.flagsToJs = flagsToJs;
exports.flagsFromJs = flagsFromJs;
exports.Stat = Stat;
exports.writeFileSync = writeFileSync;
exports.Handle = Handle;
exports.Promises = Promises;
exports.WriteStream = WriteStream;
exports.ReadStream = ReadStream;
exports.createReadStream = createReadStream;
exports.createWriteStream = createWriteStream;
/* fs Not a pure module */
