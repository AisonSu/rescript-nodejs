// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Cluster = require("cluster");
var Disconnect = require("disconnect");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");

function kill(signal, worker) {
  worker.kill(signal);
  return /* () */0;
}

function sendHttpServerHandle(options, msg, handle) {
  msg.send(handle, Js_null_undefined.fromOption(options));
  return /* () */0;
}

function sendSocketHandle(options, msg, handle) {
  msg.send(handle, Js_null_undefined.fromOption(options));
  return /* () */0;
}

var $$Worker = {
  kill: kill,
  sendHttpServerHandle: sendHttpServerHandle,
  sendSocketHandle: sendSocketHandle
};

function disconnect(callback, param) {
  Disconnect(Js_null_undefined.fromOption(callback));
  return /* () */0;
}

function fork(env, param) {
  return Cluster.fork(env);
}

function setupMaster(execArgv, exec, args, cwd, serialization, silent, stdio, uid, gid, inspectPort, windowsHide, param) {
  Cluster.setupMaster({
        execArgv: Js_null_undefined.fromOption(execArgv),
        exec: Js_null_undefined.fromOption(exec),
        args: Js_null_undefined.fromOption(args),
        cwd: Js_null_undefined.fromOption(cwd),
        serialization: Js_null_undefined.fromOption(serialization),
        silent: Js_null_undefined.fromOption(silent),
        stdio: Js_null_undefined.fromOption(stdio),
        uid: Js_null_undefined.fromOption(uid),
        gid: Js_null_undefined.fromOption(gid),
        inspectPort: Js_null_undefined.fromOption(inspectPort),
        windowsHide: Js_null_undefined.fromOption(windowsHide)
      });
  return /* () */0;
}

var decodeSchedulingPolicy = Cluster.schedulingPolicy === Cluster.SCHED_RR ? /* SCHED_RR */1 : /* SCHED_NONE */0;

function getWorker(_workers, id) {
  return Js_dict.get(_workers, id.toString());
}

console.log(Cluster);

var match = Cluster.isMaster;

if (match) {
  console.log(Cluster.schedulingPolicy);
} else {
  console.log(Cluster.worker);
}

var Test = { };

exports.$$Worker = $$Worker;
exports.disconnect = disconnect;
exports.fork = fork;
exports.setupMaster = setupMaster;
exports.decodeSchedulingPolicy = decodeSchedulingPolicy;
exports.getWorker = getWorker;
exports.Test = Test;
/* decodeSchedulingPolicy Not a pure module */
